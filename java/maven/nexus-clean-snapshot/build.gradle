buildscript {
    ext {
        //springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17")
    }
}


apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "io.spring.dependency-management"
apply plugin: 'project-report'
apply plugin: 'maven'
apply plugin: 'maven-publish'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: "com.gorylenko.gradle-git-properties" // 生成 git.properties

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "GMT+8"
    gitRepositoryRoot = new File("${project.rootDir}/../../../")
}

repositories {
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = true
    }
}

eclipse {
    classpath {
        downloadSources = true
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }

    dependencies {
        dependency("io.reactivex.rxjava2:rxjava:2.1.3")
        dependency("org.sonatype.nexus:nexus-client-core:2.14.5-02"){
            exclude 'commons-beanutils:commons-beanutils-core'
        }
        //dependency("io.reactivex.rxjava2:rxjava-joins:0.22.0")
        dependency("commons-beanutils:commons-beanutils:1.9.3")
    }
}




publish {
    dependsOn assemble
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            artifact(file("${buildDir}/libs/${project.name}-${project.version}-${bootRepackage.classifier}.jar")) {
                classifier 'boot'
            }
        }
    }

    repositories {
        maven {
            credentials {
                username "admin"
                password "admin123"
            }
            if (project.version.endsWith('-SNAPSHOT')) {
                url "http://mvn.kingsilk.xyz/content/repositories/snapshots/"
            } else {
                url "http://mvn.kingsilk.xyz/content/repositories/releases/"
            }
        }
    }
}

dependencies {
    //compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework:spring-web')
    compile("org.springframework.boot:spring-boot-devtools")
    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-xml')
    compile('org.apache.httpcomponents:httpclient')
    compile('org.apache.httpcomponents:httpasyncclient')

    compile("io.reactivex.rxjava2:rxjava")

    testCompile("org.sonatype.nexus:nexus-client-core")
    testCompile("commons-beanutils:commons-beanutils")

    compile("org.springframework.boot:spring-boot-configuration-processor")



    testCompile('org.springframework.boot:spring-boot-starter-test')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

test {
    testLogging.showStandardStreams = false
}

bootRepackage {
    enabled = true
    withJarTask jar
    classifier = 'boot'
}

bootRun {
    addResources = true
    systemProperties = System.properties

    jvmArgs = [
            "-XX:MaxRAM=100M"
            //"-Xmx=100M"
    ]
}

springBoot {
    //mainClass = System.properties['mainClass']
    buildInfo {
        additionalProperties = [
                'foo': 'bar'
        ]
    }
}

jar {
    manifest {
        attributes "Implementation-Version": project.version
    }
}



