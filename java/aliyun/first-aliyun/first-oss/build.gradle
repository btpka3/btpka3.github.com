plugins {
    id 'java'
    id "org.springframework.boot" version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.1.4'
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

java {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

repositories {
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
}

dependencies {

    compileOnly 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'



    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-cache')
//    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation("org.springframework.boot:spring-boot-devtools")
    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-xml')
    implementation('org.apache.httpcomponents:httpclient')

    // 安装SDK : https://help.aliyun.com/zh/oss/developer-reference/java-installation
    implementation('com.aliyun.oss:aliyun-sdk-oss:3.18.2')
    implementation('com.aliyun:alibabacloud-oss20190517:1.0.2')
//    implementation('javax.xml.bind:jaxb-api:2.3.1')
//    implementation('javax.activation:activation:1.1.1')
//    implementation('org.glassfish.jaxb:jaxb-runtime:2.3.3')


    testImplementation('com.aliyun:aliyun-java-sdk-core')
    testImplementation('com.aliyun:aliyun-java-sdk-green')
    testImplementation('com.alibaba:fastjson:1.2.83_noneautotype')


    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.mockito:mockito-core')
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation('commons-io:commons-io:2.14.0')

    implementation('org.springframework.boot:spring-boot-actuator')
}



//test {
//    include 'me/test/**'
//    testLogging.showStandardStreams = false
//    // listen to events in the test execution lifecycle
////    beforeTest { descriptor ->
////        logger.lifecycle("Running test: " + descriptor)
////    }
////
////    // listen to standard out and standard error of the test JVM(s)
////    onOutput { descriptor, event ->
////        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
////    }
//}

