buildscript {
    ext {
        //springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17")
    }
}


apply plugin: 'org.springframework.boot'
//apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
//    apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"
//apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: 'project-report'

repositories {
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-starter-parent:${springBootVersion}")
    }

    dependencies {
        //dependency('com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.8.7')
//            dependency('org.apache.httpcomponents:httpclient:4.5.3')

        dependency("org.springframework.boot:spring-boot-starter:${springBootVersion}") {
//            exclude 'org.springframework.boot:spring-boot-starter-logging'
        }

//            dependency("org.springframework.boot:spring-boot-starter:${springBootVersion}") {
//                exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//            }


        dependency('org.apache.commons:commons-math3:3.6.1')
        dependency('org.jsoup:jsoup:1.11.2')
        dependency('commons-io:commons-io:2.6')
        dependency('org.mongodb.morphia:morphia:1.3.2')

    }
}

// gradle run -Dexec.args="arg1 arg2 arg3"
//mainClassName = System.getProperty("mainClass")
//run {
//    //args System.getProperty("exec.args")?.split()
//}

// gradle -DmainClass=me.test.Example execute
task execute(type: JavaExec) {
    main = System.getProperty('mainClass')
    classpath = sourceSets.main.runtimeClasspath
}

idea {
    module {
        downloadJavadoc = false
        downloadSources = true
    }
}
eclipse {
    classpath {
        downloadSources = true
    }
}

gitProperties {
    gitRepositoryRoot = new File("${project.rootDir}/../..")
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

uploadArchives {
    dependsOn assemble  // 没有这句，uploadArchives 只上传没有 bootRepackage 的 jar 包`
    repositories {
        mavenDeployer {
            repository(url: "http://mvn.kingsilk.xyz/content/repositories/releases/") {
                authentication(userName: "admin", password: "admin123")
            }
            snapshotRepository(url: "http://mvn.kingsilk.xyz/content/repositories/snapshots/") {
                authentication(userName: "admin", password: "admin123")
            }
            //pom.version = "0.1.0-SNAPSHOT"
            //pom.artifactId = "simple-project"
            //pom.groupId = "com.example"
        }
    }
}




bootRun {
    //addResources = true
    systemProperties = System.properties
}

springBoot {
    //mainClass = System.properties['mainClass']
    buildInfo {
//            additionalProperties = [
//                    'foo': 'bar'
//            ]
    }
}

jar {
    manifest {
        attributes "Implementation-Version": project.version
    }
}


dependencies {
    //compile('org.codehaus.groovy:groovy-all')
    //compile('org.springframework.boot:spring-boot-starter-web')
    //compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-json')
//    compile('org.springframework.boot:spring-boot-starter-reactor-netty')
    compile('org.springframework:spring-web')
//    compile('org.springframework:spring-webflux')
//    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
//    compile("org.springframework.boot:spring-boot-devtools")
    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-xml')
    compile('org.apache.httpcomponents:httpclient')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile("org.springframework.boot:spring-boot-starter-logging")

    compile('org.jsoup:jsoup')
    compileOnly('org.projectlombok:lombok')
    compile('commons-io:commons-io')

}



test {
    include 'me/test/**'
    testLogging.showStandardStreams = false
    // listen to events in the test execution lifecycle
//    beforeTest { descriptor ->
//        logger.lifecycle("Running test: " + descriptor)
//    }
//
//    // listen to standard out and standard error of the test JVM(s)
//    onOutput { descriptor, event ->
//        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
//    }
}
