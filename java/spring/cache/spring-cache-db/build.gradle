buildscript {
	ext {
		//springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://plugins.gradle.org/m2/" }
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.github.btpka3'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url 'https://repo.spring.io/libs-milestone' }
    mavenCentral()
}

dependencyManagement {
//    imports {
//        mavenBom("org.springframework.boot:spring-boot-starter-parent:${springBootVersion}")
//        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
//    }

    dependencies {


//        dependency('log4j:log4j:1.2.17')
//
//
//        dependency('org.apache.commons:commons-math3:3.6.1')
//        dependency('commons-io:commons-io:2.6')
//        dependency("org.rocksdb:rocksdbjni:5.13.2")
//        dependency("com.esotericsoftware:kryo:4.0.2")
        dependency("org.mongodb:bson:3.8.0")
        dependency("com.caucho:hessian:4.0.51")
        dependency("com.esotericsoftware:kryo:5.0.0-RC1")


    }
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-cache')
	compile('org.mongodb:bson')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.data:spring-data-redis:2.0.7.RELEASE')
	testCompile('com.caucho:hessian')
	testCompile('com.esotericsoftware:kryo')
}


bootRun {
	//addResources = true
	systemProperties = System.properties
}

springBoot {
	buildInfo {
		properties {
			additional = [
					'a': 'alpha',
					'b': 'bravo'
			]
		}
	}
}

jar {
	manifest {
		attributes "Implementation-Version": project.version
	}
}

// gradle -DmainClass=me.test.Example execute
task execute(type: JavaExec) {
	main = System.getProperty('mainClass')
	classpath = sourceSets.main.runtimeClasspath
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}
