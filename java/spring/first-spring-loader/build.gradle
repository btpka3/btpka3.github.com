plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
}

apply plugin: me.test.GreetingPlugin
apply plugin: me.test.HiPlugin

group = 'com.github.btpka3'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
}

dependencies {
    //implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.43'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-gradle-plugin:3.2.2'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named("bootJar") {

    layered {
        enabled = false
    }

//	manifest {
//		attributes 'Main-Class': 'com.github.btpka3.first.spring.loader.MyLoaderMain'
//	}
    // bootJar.classpath = [ "/**/build/classes/java/main", "/**/ build/resources/main", "/**/fastjson2-2.0.43.jar" ]

    //println "bootJar.source =====" + it.getSource().getAsPath()
    //println "bootJar.classPath =====" +classpath.getAsPath()


    //archiveClassifier = 'boot'


//    exclude "**/MyLoader*"
//    into("/") {
//        from(compileJava)
//        include "**/MyLoader*"
//    }

    filesMatching("**/MyLoader*", { details ->
        println "=======88888 filesMatching : " \
            + "\n\t details                        =" + details \
            + "\n\t details.getRelativeSourcePath()=" + details.getRelativeSourcePath() \
            + "\n\t details.getRelativePath()      =" + details.getRelativePath()

        // relativeSourcePath = com/github/btpka3/first/spring/loader/MyLoaderMain.class
        // relativePath       = BOOT-INF/classes/com/github/btpka3/first/spring/loader/MyLoaderMain.class
        details.setRelativePath(details.getRelativeSourcePath());
    })
}

def baseSpec = copySpec {
    from "src/main/java"
    include "**/*.java"
    exclude "**/MyLoaderMain.java"
    filesMatching("**/*", { copyDetails ->
        println "=======888889 copyDetails + " + copyDetails;
    })

}

task copy(type: Copy) {

    into "target"
    with baseSpec
}