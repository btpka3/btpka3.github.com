//jar {
//    baseName = 'demo'
//    version = '0.0.1-SNAPSHOT'
//}
configurations {

}

dependencies {
//    api platform(project(":platform"))
    // implementation(project(":lib"))

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.springframework.boot:spring-boot-devtools"
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'org.apache.httpcomponents:httpclient'
    implementation 'javax.cache:cache-api'
    implementation 'org.infinispan:infinispan-jcache'
    implementation 'org.infinispan:infinispan-spring-boot-starter-embedded'
    implementation 'org.infinispan:infinispan-spring-boot-starter'
    implementation 'org.infinispan:infinispan-spring4-embedded'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-test'

    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

    implementation('joda-time:joda-time')

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core'

    implementation "org.springframework.boot:spring-boot-starter-logging"

    implementation 'org.springframework.boot:spring-boot-actuator'

    implementation 'com.kjetland:mbknor-jackson-jsonschema_2.12'

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'com.fasterxml.jackson.module:jackson-module-jsonSchema'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "org.mongodb:bson"

    implementation 'net.logstash.logback:logstash-logback-encoder'
    implementation 'com.fasterxml.uuid:java-uuid-generator'

}


test {
    include 'me/test/**'
    testLogging.showStandardStreams = false

    useJUnit()
    maxHeapSize = '1G'
    systemProperties = System.properties
    // listen to events in the test execution lifecycle
//    beforeTest { descriptor ->
//        logger.lifecycle("Running test: " + descriptor)
//    }
//
//    // listen to standard out and standard error of the test JVM(s)
//    onOutput { descriptor, event ->
//        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
//    }
}
//
//buildScan {
//    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
//    termsOfServiceAgree = 'no'
//}