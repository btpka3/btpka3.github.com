buildscript {
    ext {
        //springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
//        maven {
//            url "https://plugins.gradle.org/m2/"
//        }
    }
//    dependencies {
//        classpath("org.springtestframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        classpath("io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE")
//        //classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17")
//    }
}


plugins {
    id 'groovy'
    id 'eclipse'
    id 'idea'
    id 'maven'
    id 'project-report'
//    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "org.springframework.boot" version "2.1.3.RELEASE" apply false
}

// https://docs.gradle.org/current/javadoc/org/gradle/api/artifacts/ComponentMetadataDetails.html
class JacksonAlignmentRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext ctx) {
        ctx.details.with {
            if (id.group.startsWith("com.fasterxml.jackson")) {
                // declare that Jackson modules all belong to the Jackson virtual platform
                belongsTo("com.fasterxml.jackson:jackson-platform:${id.version}")
            }
        }
    }
}

// 移除不合理的依赖，添加部分依赖
// https://docs.gradle.org/6.0.1/userguide/component_metadata_rules.html
class JaxenCapabilitiesRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext context) {
        context.details.addVariant("runtime-dom4j", "runtime") {
            withCapabilities {
                removeCapability("jaxen", "jaxen")
                addCapability("jaxen", "jaxen-dom4j", context.details.id.version)
            }
            withDependencies {
                add("dom4j:dom4j:1.6.1")
            }
        }
    }
}

allprojects {

//    apply plugin: 'groovy'
//    apply plugin: 'eclipse'
//    apply plugin: 'idea'
//    apply plugin: 'org.springframework.boot'
//    apply plugin: "io.spring.dependency-management"
    //apply plugin: 'application'
//    apply plugin: 'java'
//    apply plugin: 'maven'
    //apply plugin: "com.gorylenko.gradle-git-properties"
//    apply plugin: 'project-report'

    task printProps {
        doLast {
//            println commandLineProjectProp
//            println gradlePropertiesProp
            println sysProp + "~~~~" + this
            println System.properties['system']
        }
    }

    repositories {
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }


//    // [Managing Transitive Dependencies](https://docs.gradle.org/6.0.1/userguide/dependency_constraints.html)
//    dependencies {
//        // [BOM support](https://gradle.org/whats-new/gradle-5/)
//        implementation platform("org.infinispan:infinispan-bom:${infinispanVersion}")
//        implementation platform("org.springframework.boot:spring-boot-starter-parent:${springBootVersion}")
//
//        // 类似maven的 dependencyManagement
//        constraints {
//            implementation('org.apache.httpcomponents:httpclient:4.5.3'){
//                exclude group: 'javax.jms', module: 'jms'
//            }
//            implementation('commons-codec:commons-codec:1.11')
//        }
//
//        // implementation enforcedPlatform('com.fasterxml.jackson:jackson-platform:2.8.9')
//
//        // [Dependency version alignment](https://docs.gradle.org/5.0/userguide/managing_transitive_dependencies.html#sec:version_alignment)
//        // components.all(JacksonAlignmentRule)
//    }

//    dependencyManagement {
////        println "=========ssss ==="+System.properties['system']+": "+this+":::"+ springBootVersion
//        //println "=========1111 ==="+buildCache
////        println "=========yyyy ==="+infinispanStarterVersion
////        println "=========infinispanVersion = ${infinispanVersion}, ==="+System.properties['system']
//        imports {
//            println "=========ssss ===" + System.properties['system'] + ": " + this + ":::" + springBootVersion
//            mavenBom("org.infinispan:infinispan-bom:${infinispanVersion}")
//            mavenBom("org.springframework.boot:spring-boot-starter-parent:${springBootVersion}")
//        }
//
//        dependencies {
//            //dependency('com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.8.7')
////            dependency('org.apache.httpcomponents:httpclient:4.5.3')
//
//            dependency("org.springframework.boot:spring-boot-starter:${springBootVersion}") {
//                exclude 'org.springframework.boot:spring-boot-starter-logging'
//            }
//
////            dependency("org.springframework.boot:spring-boot-starter:${springBootVersion}") {
////                exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
////            }
//
//            dependency('org.apache.cxf:cxf-spring-boot-starter-jaxws:3.1.10')
//            dependency('org.apache.cxf:cxf-rt-frontend-jaxrs:3.1.10')
//            dependency('org.apache.cxf:cxf-rt-rs-service-description-swagger:3.1.10')
//            dependency('org.webjars:swagger-ui:2.2.10-1')
//            dependency('org.grails:gorm-mongodb-spring-boot:6.0.7.RELEASE')
//            dependency('org.grails.plugins:rx-mongodb:6.0.6.RELEASE')
//            dependency('org.grails:grails-datastore-gorm-rx-mongodb:6.0.7.RELEASE')
//            dependency('org.grails:grails-validation:3.1.11')
//            dependency('org.webjars:swagger-ui:2.2.10')
//            dependency('javax.ws.rs:jsr311-api:1.1.1')
//            dependency('javax.ws.rs:javax.ws.rs-api:2.0.1')
//
////            dependency('org.glassfish.jersey.ext:jersey-spring3:2.25.1')
////            dependency('org.glassfish.jersey.media:jersey-media-multipart:2.25.1')
////            dependency('org.glassfish.jersey.core:jersey-client:2.25.1')
//
//            dependency('io.swagger:swagger-core:1.5.16')                 // 1.5.12,1.5.10
//            dependency('io.swagger:swagger-jaxrs:1.5.16')
//            dependency('io.swagger:swagger-jersey2-jaxrs:1.5.16')
//            dependency('io.springfox:springfox-swagger2:2.6.1')
//            dependency('io.springfox:springfox-data-rest:2.6.1')
//            dependency('io.springfox:springfox-staticdocs:2.6.1')
//            dependency('io.springfox:springfox-swagger-ui:2.6.1')
//            dependency('org.webjars:sockjs-client:1.1.1')
//
//            dependency('org.webjars.bower:angular:1.6.0')
//            dependency('org.webjars.bower:angular-messages:1.6.0')
//            dependency('org.webjars.bower:angular-animate:1.6.0')
//            dependency('org.webjars.bower:angular-aria:1.6.0')
//            dependency('org.webjars:angular-material:1.1.1')
//            dependency('org.webjars.bower:angular-material-icons:0.7.1') {
//                exclude "org.webjars.bower:angular"
//            }
//
////            dependency('com.querydsl:querydsl-apt:4.1.4')
////            dependency('com.querydsl:querydsl-collections:4.1.4')
////            dependency('com.querydsl:querydsl-core:4.1.4')
////            dependency('com.querydsl:querydsl-jpa:4.1.4')
////            dependency('com.querydsl:querydsl-mongodb:4.1.4')
////            dependency('joda-time:joda-time:2.9.7')
////            dependency('com.google.guava:guava:21.0')
//            dependency('org.apache.commons:commons-math3:3.6.1')
//            dependency('commons-io:commons-io:2.6')
//            dependency('org.mongodb.morphia:morphia:1.3.2')
//
//            // openfeign
//            dependency("io.github.openfeign:feign-core:${feignVersion}")
//            dependency("io.github.openfeign:feign-slf4j:${feignVersion}")
//            dependency("io.github.openfeign:feign-httpclient:${feignVersion}")
//            dependency("io.github.openfeign:feign-jaxrs:${feignVersion}")
//            dependency("io.github.openfeign:feign-jackson:${feignVersion}")
//            dependency("org.infinispan:infinispan-spring-boot-starter-embedded:${infinispanStarterVersion}")
//            dependency("org.infinispan:infinispan-spring-boot-starter:${infinispanStarterVersion}")
//            dependency("com.kjetland:mbknor-jackson-jsonschema_2.12:1.0.34")
//            dependency('com.fasterxml.jackson.module:jackson-module-jsonSchema:2.9.9')
//
//            //dependency('org.apache.geode:geode-core:1.1.1')
//
//        }
//    }


    // gradle run -Dexec.args="arg1 arg2 arg3"
    //mainClassName = System.getProperty("mainClass")
    //run {
    //    //args System.getProperty("exec.args")?.split()
    //}

    // gradle -DmainClass=me.test.Example execute
    task execute(type: JavaExec) {
        main = System.getProperty('mainClass')
        classpath = sourceSets.main.runtimeClasspath
    }

    idea {
        module {
            downloadJavadoc = false
            downloadSources = true
        }
    }
    eclipse {
        classpath {
            downloadSources = true
        }
    }

//    gitProperties {
//        gitRepositoryRoot = new File("${project.rootDir}/../../..")
//    }


    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

//    artifacts {
//        archives sourcesJar
//        //archives javadocJar
//    }

    uploadArchives {
        dependsOn assemble  // 没有这句，uploadArchives 只上传没有 bootRepackage 的 jar 包`
        repositories {
            mavenDeployer {
                repository(url: "http://mvn.kingsilk.xyz/content/repositories/releases/") {
                    authentication(userName: "admin", password: "admin123")
                }
                snapshotRepository(url: "http://mvn.kingsilk.xyz/content/repositories/snapshots/") {
                    authentication(userName: "admin", password: "admin123")
                }
                //pom.version = "0.1.0-SNAPSHOT"
                //pom.artifactId = "simple-project"
                //pom.groupId = "com.example"
            }
        }
    }
}


class MyAlignmentRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext ctx) {
        ctx.details.with {
            if (id.group.startsWith("com.fasterxml.jackson")) {
                // declare that Jackson modules all belong to the Jackson virtual platform
                belongsTo("com.fasterxml.jackson:jackson-platform:${id.version}")
            }
        }
    }
}

subprojects {


    apply plugin: 'maven'
//    apply plugin: "io.spring.dependency-management"

    println "~~~~~~" + name
    if ('platform'.equals(name)) {
        apply plugin: 'java-platform'
    } else {
        apply plugin: 'java'
        apply plugin: 'org.springframework.boot'

        dependencies {

            implementation platform("org.infinispan:infinispan-bom:${infinispanVersion}")
            implementation platform("org.springframework.boot:spring-boot-starter-parent:${springBootVersion}")

            // Forcefully downgrade the Jackson platform to 2.8.9
            components.all(MyAlignmentRule)
            implementation enforcedPlatform('com.fasterxml.jackson:jackson-platform:2.10.1')

            constraints {
//                api(project(":first-spring-boot-test"))
                implementation "com.kjetland:mbknor-jackson-jsonschema_2.12:1.0.34"

                implementation 'net.logstash.logback:logstash-logback-encoder:6.3'
                implementation 'com.fasterxml.uuid:java-uuid-generator:3.2.0'
                implementation "org.infinispan:infinispan-spring-boot-starter-embedded:${infinispanStarterVersion}"
                implementation "org.infinispan:infinispan-spring-boot-starter:${infinispanStarterVersion}"
                implementation "org.mongodb:bson:4.0.2"
            }


        }

        configurations {
            all*.exclude group: 'xml-apis', module: 'xmlParserAPIs'
        }
    }

//    dependencies {
//        compile('org.codehaus.groovy:groovy')
//        compile('org.springframework.boot:spring-boot-starter-web')
//        compile('org.springframework.boot:spring-boot-starter-thymeleaf')
//        compile("org.springframework.boot:spring-boot-devtools")
//        compile('com.fasterxml.jackson.dataformat:jackson-dataformat-xml')
//        compile('org.apache.httpcomponents:httpclient')
//
//        testCompile('org.springframework.boot:spring-boot-starter-test')
//    }

//
//    bootRun {
//        //addResources = true
//        systemProperties = System.properties
//    }

//    springBoot {
//        //mainClass = System.properties['mainClass']
//        buildInfo {
////            additionalProperties = [
////                    'foo': 'bar'
////            ]
//        }
//    }

//    jar {
//        manifest {
//            attributes "Implementation-Version": project.version
//        }
//    }

//    test {
//        systemProperties = System.properties
//    }

}