import org.jooq.meta.jaxb.Logging

buildscript {
    ext {
        //springBootVersion = '1.5.2.RELEASE'
        //jooq.version = '3.16.1'
    }
    repositories {
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }
    configurations['classpath'].resolutionStrategy.eachDependency {
        if (requested.group == 'org.jooq') {
            useVersion '3.16.1'
        }
    }
}


plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id "nu.studer.jooq" version "7.1.1"
}

group = 'com.github.btpka3'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11


sourceSets {
    main {
        java {
            srcDirs 'src/generated-src/jooq/main'
        }
    }
}

//tasks.withType(JavaCompile) {
//    options.release = 11
//}


repositories {
    //mavenLocal()
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
}

// https://docs.gradle.org/current/userguide/java_plugin.html
configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jooq {
    //version = '3.17.3'
    version = '3.16.1'
    edition = nu.studer.gradle.jooq.JooqEdition.OSS
    configurations {
        sakila {
            generateSchemaSourceOnCompilation = false
            generationTool {
                logging = Logging.WARN
                jdbc {
                    //driver = 'com.mysql.jdbc.Driver'
                    driver = 'com.mysql.cj.jdbc.Driver'
                    url = 'jdbc:mysql://localhost:3306/sakila?useSSL=false'
                    user = 'root'
                    password = '123456'
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                        property {
                            key = 'verifyServerCertificate'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    strategy {
                        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                    }
                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase'
                        inputSchema = 'sakila'
                        unsignedTypes = false
                    }
                    generate {
                        relations = true
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'com.github.btpka3.first.spring.jooq.domain'
                        directory = 'src/generated-src/jooq/main'
                    }
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
//    implementation 'org.jooq:jooq:3.17.3'
    implementation 'org.jooq:jooq:3.16.1'
    jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    jooqGenerator 'mysql:mysql-connector-java:8.0.30'
    implementation 'mysql:mysql-connector-java:8.0.30'
}

test {
    useJUnitPlatform()
}


