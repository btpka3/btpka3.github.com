/*
 * This file is generated by jOOQ.
 */
package com.github.btpka3.first.spring.jooq.domain.tables.records;


import com.github.btpka3.first.spring.jooq.domain.tables.FilmText;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FilmTextRecord extends UpdatableRecordImpl<FilmTextRecord> implements Record3<Short, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>sakila.film_text.film_id</code>.
     */
    public FilmTextRecord setFilmId(Short value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>sakila.film_text.film_id</code>.
     */
    public Short getFilmId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>sakila.film_text.title</code>.
     */
    public FilmTextRecord setTitle(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>sakila.film_text.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>sakila.film_text.description</code>.
     */
    public FilmTextRecord setDescription(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>sakila.film_text.description</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Short, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Short, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return FilmText.FILM_TEXT.FILM_ID;
    }

    @Override
    public Field<String> field2() {
        return FilmText.FILM_TEXT.TITLE;
    }

    @Override
    public Field<String> field3() {
        return FilmText.FILM_TEXT.DESCRIPTION;
    }

    @Override
    public Short component1() {
        return getFilmId();
    }

    @Override
    public String component2() {
        return getTitle();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Short value1() {
        return getFilmId();
    }

    @Override
    public String value2() {
        return getTitle();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public FilmTextRecord value1(Short value) {
        setFilmId(value);
        return this;
    }

    @Override
    public FilmTextRecord value2(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public FilmTextRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public FilmTextRecord values(Short value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FilmTextRecord
     */
    public FilmTextRecord() {
        super(FilmText.FILM_TEXT);
    }

    /**
     * Create a detached, initialised FilmTextRecord
     */
    public FilmTextRecord(Short filmId, String title, String description) {
        super(FilmText.FILM_TEXT);

        setFilmId(filmId);
        setTitle(title);
        setDescription(description);
    }

    /**
     * Create a detached, initialised FilmTextRecord
     */
    public FilmTextRecord(com.github.btpka3.first.spring.jooq.domain.tables.pojos.FilmText value) {
        super(FilmText.FILM_TEXT);

        if (value != null) {
            setFilmId(value.getFilmId());
            setTitle(value.getTitle());
            setDescription(value.getDescription());
        }
    }
}
